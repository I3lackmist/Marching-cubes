#include "./FastNoise.hlsl"

#pragma kernel CaveGen 

RWStructuredBuffer<float> noiseValues;
RWStructuredBuffer<float> heightValues;

float size;
float3 chunkIndex;

int octaves;
float scale;
float lacunarity;
float persistence;
float baseConstant;

float distanceBetweenPoints;

int noiseType;
int seed;

int generateEverywhere;
int gridpointsFromSurface;

[numthreads(8, 8, 8)]
void CaveGen (int3 tid : SV_DISPATCHTHREADID)
{
    int index = tid.x + tid.y * 8 + tid.z * 64;
    int heightMapIndex = tid.x + tid.z * 8;

	float posY = (float)tid.y + chunkIndex.y * (size-1);
    float worldPosY = distanceBetweenPoints * posY;

    float currentNoiseValue = noiseValues[index];
	float heightValue = heightValues[heightMapIndex];
	
	if (
		worldPosY > heightValue - distanceBetweenPoints * gridpointsFromSurface && 
		generateEverywhere < 1
	) 
	{
		return;
	} 

	fnl_state noise = fnlCreateState(seed);

	noise.noise_type = noiseType;

	float noiseValue = 0;

	float frequency = 1;
	float amplitude = 1;

	float posX = (float)tid.x + chunkIndex.x * (size-1);
	float posZ = (float)tid.z + chunkIndex.z * (size-1);

	float sampleX;
	float sampleY;
	float sampleZ;

	for (int i = 0; i < octaves; i++) {
		sampleX = posX / scale * frequency;
		sampleY = posY / scale * frequency;
		sampleZ = posZ / scale * frequency;

		noiseValue = noiseValue + ((fnlGetNoise3D(noise, sampleX, sampleY, sampleZ) + 1) * 0.5) * amplitude;

		frequency = frequency * lacunarity;
		amplitude = amplitude * persistence;
	}
	
	noiseValue = noiseValue + baseConstant;

	if (noiseValue > octaves) 
	{
		noiseValue = octaves;
	}

	noiseValue = noiseValue / octaves;
	
	if (noiseValue < 0) noiseValue = 0;
	if (noiseValue > 1) noiseValue = 1;

	noiseValues[index] = currentNoiseValue + noiseValue;
}