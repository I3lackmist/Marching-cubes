#include "./FastNoise.hlsl"

#pragma kernel NoiseMap

// RWBuffer<float> noiseData;

RWTexture2D<float4> renderTexture;

int height;
int width;

int octaves;
float scale;
float lacunarity;
float persistence;

int seed;
float time;

[numthreads(8,8,1)]
void NoiseMap (int3 gtid : SV_GROUPTHREADID, int3 gid : SV_GROUPID, int3 tid : SV_DISPATCHTHREADID)
{
	fnl_state noise = fnlCreateState(seed);

	noise.noise_type = FNL_NOISE_OPENSIMPLEX2;

	// int idx = gid.y * 8*width + gtid.y * width + gid.x * 8 + gtid.x;

	float noiseVal = 0;

	float frequency = 1;
	float amplitude = 1;

	for (int i = 0; i < octaves; i++) {
		float sampleX = ((float)tid.x) / scale * frequency;
		float sampleY = ((float)tid.y) / scale * frequency;

		noiseVal = noiseVal + ((fnlGetNoise3D(noise, sampleX, sampleY, time) + 1) * 0.5) * amplitude;

		frequency = frequency * lacunarity;
		amplitude = amplitude * persistence;
	}

	if (noiseVal > octaves) {
		noiseVal = octaves;
	}

	noiseVal = noiseVal / octaves;

	// noiseData[idx] = noiseVal;

	renderTexture[tid.xy] = float4(noiseVal, noiseVal, noiseVal, 0);
}
