#include "./FastNoise.hlsl"

#pragma kernel NoiseMap

RWStructuredBuffer<float> noiseValues;

float size;

float X;
float Y;
float Z;

int octaves;
float maxValue;
float scale;
float lacunarity;
float persistence;
float floorLevel = 0.0;
float cutoffLevel = 2.0;
float heightWeight = 0.25;

int seed;

[numthreads(8, 8, 8)]
void NoiseMap (int3 tid : SV_DISPATCHTHREADID)
{
	fnl_state noise = fnlCreateState(seed);

	noise.noise_type = FNL_NOISE_OPENSIMPLEX2;

	float noiseVal = 0;

	float frequency = 1;
	float amplitude = 1;

	float posX = (float)tid.x + X * (size-1);
	float posY = (float)tid.y + Y * (size-1);
	float posZ = (float)tid.z + Z * (size-1);

	float sampleX;
	float sampleY;
	float sampleZ;

	for (int i = 0; i < octaves; i++) {
		sampleX = posX / scale * frequency;
		sampleY = posY / scale * frequency;
		sampleZ = posZ / scale * frequency;

		noiseVal = noiseVal + ((fnlGetNoise3D(noise, sampleX, sampleY, sampleZ) + 1) * 0.5) * amplitude;

		frequency = frequency * lacunarity;
		amplitude = amplitude * persistence;
	}

	if (noiseVal > maxValue) {
		noiseVal = maxValue;
	}

	if (Y == floorLevel && tid.y == 0) {
		noiseVal = 0;
	}

	// if (posY > floorLevel) {
	// 	float reduceValueStrength = (posY - floorLevel) * heightWeight;

	// 	if (reduceValueStrength > 1.0)  {
	// 		reduceValueStrength = 1.0;
	// 	}

	// 	float reduceValuePercent = 1.0 - reduceValueStrength;

	// 	noiseVal = noiseVal * reduceValuePercent;

	// 	if (Y > cutoffLevel) {
	// 		noiseVal = 0;
	// 	}
	// }

	noiseVal = noiseVal / maxValue;

	noiseValues[tid.x + tid.y * 8 + tid.z * 64] = noiseVal;
}
