#include "./FastNoise.hlsl"

#pragma kernel Landscape

RWStructuredBuffer<float> noiseValues;

float size;

float3 chunkIndex;

int octaves;
float maxValue;
float scale;
float lacunarity;
float persistence;
float isoLevel;

int seed;

[numthreads(8, 8, 1)]
void Landscape (int3 tid : SV_DISPATCHTHREADID)
{
	fnl_state noise = fnlCreateState(seed);

	noise.noise_type = FNL_NOISE_OPENSIMPLEX2;

	float noiseVal = 0;

	float frequency = 1;
	float amplitude = 1;

	float posX = (float)tid.x + chunkIndex.x * (size-1);
	float posY = (float)tid.y + chunkIndex.y * (size-1);
	float posZ = (float)tid.y + chunkIndex.z * (size-1);

	float sampleX;
	float sampleZ;

	for (int i = 0; i < octaves; i++) {
		sampleX = posX / scale * frequency;
		sampleZ = posZ / scale * frequency;

		noiseVal = noiseVal + ((fnlGetNoise2D(noise, sampleX, sampleZ) + 1) * 0.5) * amplitude;

		frequency = frequency * lacunarity;
		amplitude = amplitude * persistence;
	}

	if (noiseVal > maxValue) {
		noiseVal = maxValue;
	}

	noiseVal = maxValue * ();

	noiseValues[tid.x + tid.y * 8 + tid.z * 64] = noiseVal;
}
