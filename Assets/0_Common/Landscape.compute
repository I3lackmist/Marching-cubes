#include "./FastNoise.hlsl"

#pragma kernel Landscape

RWStructuredBuffer<float> noiseValues;

float size;
float3 chunkIndex;

int octaves;
float maxValue;
float scale;
float lacunarity;
float persistence;
float isoLevel;

float maxHeight;
float minHeight;

int noiseType;
int seed;

[numthreads(8, 8, 8)]
void Landscape (int3 tid : SV_DISPATCHTHREADID)
{
	float posY = (float)tid.y + chunkIndex.y * (size-1);

	if (posY <= 0) return;

	fnl_state noise = fnlCreateState(seed);
	noise.noise_type = noiseType;

	float heightVal = 0;

	float frequency = 1;
	float amplitude = 1;

	float posX = (float)tid.x + chunkIndex.x * (size-1);
	float posZ = (float)tid.z + chunkIndex.z * (size-1);

	float sampleX;
	float sampleZ;

	for (int i = 0; i < octaves; i++) {
		sampleX = posX / scale * frequency;
		sampleZ = posZ / scale * frequency;

		heightVal = heightVal + ((fnlGetNoise2D(noise, sampleX, sampleZ) + 1) * 0.5) * amplitude;

		frequency = frequency * lacunarity;
		amplitude = amplitude * persistence;
	}

	heightVal = heightVal / maxValue * maxHeight;
	
	float noiseValue = noiseValues[tid.x + tid.y * 8 + tid.z * 64];

	if (posY >= heightVal + minHeight) {
		noiseValue = maxValue;
	}
	else {
		noiseValue = 0;
	}

	noiseValues[tid.x + tid.y * 8 + tid.z * 64] = noiseValue;
}
